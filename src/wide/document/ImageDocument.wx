
Namespace wide

#Import "../miniui.wx"

#Import "../assets/themes/toolbar/zoom.png"
#Import "../assets/themes/toolbar/zoom_in.png"
#Import "../assets/themes/toolbar/zoom_out.png"


Class ImageDocumentView Extends View
	field ctrls:MiniUI = New MiniUI( 10 )

	field _scale:float = 1
	field _text:string
	field _text2:string
	field _text3:string
	
	field _panel:int
	field _vFaderZoom:int
	field _buttonZoom:int
	field _buttonZoomIn:int
	field _buttonZoomOut:int
	
	field _zoomImage:Image
	field _zoomInImage:Image
	field _zoomOutImage:Image


	Method New( doc:ImageDocument )
		_doc=doc
		
		Layout="fill"

		If _audioTimer Then _audioTimer.Suspended = true
		
		_doc.ImageChanged = Lambda()
			If Not _doc.Image
				_text = ""
				_text2 = ""
				_text3 = ""
				Return
			Endif
			
			Local format:="?????"
			Select _doc.Image.Texture.Format
				Case PixelFormat.I8 format = "PixelFormat.I8"
				Case PixelFormat.A8 format = "PixelFormat.A8"
				Case PixelFormat.IA16 format = "PixelFormat.IA16"
				Case PixelFormat.RGB24 format = "PixelFormat.RGB24"
				Case PixelFormat.RGBA32 format = "PixelFormat.RGBA32"
			End
			
			_text = "Width/Height: "+_doc.Image.Width+", "+_doc.Image.Height
			_text2 = "PixelDepth: "+PixelFormatDepth( _doc.Image.Texture.Format )
			_text3 = format
		End
		
		_zoomImage = Image.Load( "asset::zoom.png" )
		_zoomInImage = Image.Load( "asset::zoom_in.png" )
		_zoomOutImage = Image.Load( "asset::zoom_out.png" )
		
		
		ctrls.OverColor = MainWindow._theme.IDE[3] * 0.7
		
		local control:int
		_scale = App.Theme.Scale.x
		_panel = ctrls.AddPanel( 0,0, 200, 70, MainWindow._theme.IDE[2], True )

		_buttonZoom = ctrls.AddImageButton( 0,70, 40, 40, MainWindow._theme.IDE[2], "", _zoomImage, True )
		ctrls.SetBorder( _buttonZoom, 6 )

		_buttonZoomIn = ctrls.AddImageButton( 0,110, 40, 40, MainWindow._theme.IDE[2], "", _zoomInImage, True )
		ctrls.SetBorder( _buttonZoomIn, 6 )

		_buttonZoomOut = ctrls.AddImageButton( 0,150, 40, 40, MainWindow._theme.IDE[2], "", _zoomOutImage, True )
		ctrls.SetBorder( _buttonZoomOut, 6 )

		_vFaderZoom = ctrls.AddVFader( 0,190, 40, -1, MainWindow._theme.IDE[2], True )
		ctrls.SetValue( _vFaderZoom, 0.1 )

		ctrls.Clicked = lambda( ctrl:int )
			Select ctrl
				Case _buttonZoom
					_zoom = 1
					ctrls.SetValue( _vFaderZoom, 0.1 )
					App.RequestRender()
					
				Case _buttonZoomIn
					_zoom *= 1.5
					_zoom = Clamp(_zoom, 0,10)
					ctrls.SetValue( _vFaderZoom, _zoom * 0.1 )
					App.RequestRender()

				Case _buttonZoomOut
					_zoom /= 1.5
					_zoom = Clamp(_zoom, 0,10)
					ctrls.SetValue( _vFaderZoom, _zoom * 0.1 )
					App.RequestRender()

				Case _vFaderZoom
					_zoom = Clamp( ctrls.GetValue( _vFaderZoom ), 0,1) * 10
					App.RequestRender()

			End Select
			App.RequestRender()
		End
		
		
'		AddChildView( _label )
	End


Protected

	
	Method OnLayout() Override
	End

	
	method OnThemeChanged() Override
		ctrls.OverColor = MainWindow._theme.IDE[3] * 0.7
		ctrls.TextColor = MainWindow._theme.IDE[1]

		ctrls.SetColor( _panel, MainWindow._theme.IDE[2] )
		ctrls.SetColor( _vFaderZoom, MainWindow._theme.IDE[2] )
		ctrls.SetColor( _buttonZoom, MainWindow._theme.IDE[2] )
		ctrls.SetColor( _buttonZoomIn, MainWindow._theme.IDE[2] )
		ctrls.SetColor( _buttonZoomOut, MainWindow._theme.IDE[2] )
	End Method
	
	
	Method OnRender( canvas:Canvas ) Override
		'enable perfect pixels
		canvas.TextureFilteringEnabled = False

		'get the global scaling system
		_scale = App.Theme.Scale.x
		ctrls.Scale = _scale

		local x:int
		local y:int
		
		For y = 0 Until Height Step 64
			For x = 0 Until Width Step 64
				canvas.Color = Color.PicoBlack
				canvas.DrawRect( x,y, 64,64 )
				
				canvas.Color = Color.Asphalt * 0.5
				canvas.DrawRect( x,y, 32,32 )

				canvas.DrawRect( x+32,y+32, 32,32 )
			Next
		Next
		
		If Not _doc.Image Then Return
		
'		canvas.Color = Color.PicoBlack
'		canvas.DrawRect( 0,0, 200,70)
'
'		canvas.Translate( Width/2,Height/2 )
'		canvas.Scale( _zoom, _zoom )
		canvas.Color = Color.White
'		canvas.DrawImage( _doc.Image,0,0 )
		local width:float = _doc.Image.Width * _zoom
		local height:float = _doc.Image.Height * _zoom
		local midX:int = (Width - width) * 0.5
		local midY:int = (Height - height) * 0.5
'		canvas.DrawFrame( midX,midY, width, height )
		canvas.DrawRect( midX,midY, width, height, _doc.Image )
		
		canvas.Color = Color.Black * 0.7
		canvas.DrawRect( 0,0, Width, midY )
		canvas.DrawRect( 0,midY+height, Width, midY )
		canvas.DrawRect( 0,midY, midX, height )
		canvas.DrawRect( midX+width,midY, midX, height )


		canvas.ClearMatrix()
		ctrls.DrawControls( canvas, _mouseX, _mouseY, _mouseDown )

		canvas.Color = MainWindow._theme.IDE[1]
		canvas.DrawText( _text, 5*_scale,10*_scale )
		canvas.DrawText( _text2, 5*_scale,30*_scale )
		canvas.DrawText( _text3, 5*_scale,50*_scale )
	End


	Method OnMouseEvent( event:MouseEvent ) Override
		Select event.Type
			Case EventType.MouseWheel
				local z:Float = -event.Wheel.Y

#If __TARGET__<>"macos"
				z = -z
#endif
			
				If z > 0 Then
					_zoom *= 1.5
				Else If z < 0 Then
					_zoom /= 1.5
				Endif
				_zoom = Clamp(_zoom, 0,10)
				
				ctrls.SetValue( _vFaderZoom, _zoom * 0.1 )
				
				App.RequestRender()
				
			Case EventType.MouseDown
				_mouseDown = Mouse.ButtonDown( MouseButton.Left )
				
				App.RequestRender()
				
			Case EventType.MouseUp
				_mouseDown = False

				App.RequestRender()

			Case EventType.MouseMove
				_mouseX = event.Location.X
				_mouseY = event.Location.Y
				_mouseDown = Mouse.ButtonDown( MouseButton.Left )

				If ctrls.Over( _mouseX, _mouseY ) Then
					App.RequestRender()
				End If
		End
	
	End

	
Private

	Field _zoom:Float=1
	Field _doc:ImageDocument
'	Field _label:Label
End


Class ImageDocument Extends WideDocument

	Field ImageChanged:Void()


	Method New( path:String )
		Super.New( path )
		
		_view=New ImageDocumentView( Self )
	End

	
	Property Image:Image()
		Return _image
	End

	
Protected

	
	Method OnLoad:Bool() Override
		_image=Image.Load( Path )
		If Not _image Return False
		
		_image.Handle=New Vec2f( .5,.5 )
		
		ImageChanged()
		
		Return True
	End

	
	Method OnSave:Bool() Override
		Return False
	End

	
	Method OnClose() Override
		If _image _image.Discard()

		_image=Null
	End

	
	Method OnCreateView:ImageDocumentView() Override
		Return _view
	End
	
Private
	
	Field _image:Image
	Field _view:ImageDocumentView
	
End


Class ImageDocumentType Extends WideDocumentType

	Property Name:String() Override
		Return "ImageDocumentType"
	End

	
Protected

	
	Method New()
		AddPlugin( Self )
		
		Extensions=New String[]( ".png",".jpg",".jpeg",".bmp" )
	End

	
	Method OnCreateDocument:WideDocument( path:String ) Override
		Return New ImageDocument( path )
	End
	
Private
	
	Global _instance:=New ImageDocumentType
	
End
