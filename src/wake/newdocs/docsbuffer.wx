
Namespace wx.newdocs

Class DocsBuffer
	
	Method New( docs:DocsNode, parent:DocsNode, module:Module, baseDir:String="" )
		
		_docs=docs
		
		_parent=parent

		_module=module
		
		_baseDir=baseDir
		
	End
	
	Method EmitBr()
		
		EmitLine( "" )
	End
	
	Method Emit( docs:String )
	
		Local lines:=docs.Split( "~n" )

		EmitLines( lines )
	End
	
	Method EmitLine( line:String )
		
		Local tline:=line.Trim()
		
		If tline.StartsWith( "```" )
			If _pre=-1
				_lines.Push( tline )
				_pre=_lines.Length
			Else
				FixIndent( _pre,_lines.Length )
				_lines.Push( tline )
				_pre=-1
			Endif
			Return
		Endif

		If _pre=-1 line=tline
		
		If Not line And _lines.Length And Not _lines.Top Return
		
		_lines.Push( line )
	End
	
	Method EmitLines( lines:String[] )
		
		Local i:=0
		
		While i<lines.Length
			
			Local line:=lines[i]
			i+=1

			Local tline:=line.Trim()
			
			If Not tline.StartsWith( "@" )
				EmitLine( line )
				Continue
			Endif
			
			line=tline
			
			Local j:=line.Find( " " )
			If j=-1 j=line.Length
			
			Local tag:=line.Slice( 1,j )
			Local arg:=line.Slice( j+1 ).Trim()
			
			Select tag.ToLower()
			Case "deprecated"
				
				Emit( "(Deprecated: "+arg+")" )
				
			Case "label"
			
				_label=arg
				
			Case "param"
			
				_params.Push( arg )
				
			Case "return"
			
				_return=arg
				
			Case "import"

				If arg.StartsWith("~q") And arg.EndsWith("~q") Then arg = arg.Slice(1,-1)
				
				Local path:=_baseDir+arg
				
				Local src:=LoadString( path )
				
				If src
'					Print "Importing "+path
					
					Local docs:=New DocsNode( "","",_docs,DocsType.Nav,True )
					
					Local buf:=New DocsBuffer( docs, _parent, _module, ExtractDir( path ) )
					
					buf.Emit( src )
					
					docs.Markdown=buf.Flush()
				Else
					Print "DocsBuffer: Can't @import file '"+path+"'"
					Print "   FileName: "+arg
					'Debug()
				Endif

			Case "image"
				
				If arg.StartsWith("~q") And arg.EndsWith("~q") Then arg = arg.Slice(1,-1)
				
				Local srcImage:String, dstImage:String
				
				If _module
					srcImage = _module.baseDir+"images/"+arg
					dstImage = "modules/"+_module.name+"/images/"+arg
				Endif

				If srcImage And dstImage And GetFileType( srcImage ) = FileType.File
					'Print "Importing Image: "+arg
					'Print "   FileName: "+arg
					'Debug()

					EmitLine( "<img src=~q../images/"+arg+"~q alt=~qImage~q>" )

					DocsMaker.AddImage(srcImage, dstImage)

				Else
					Print "DocsBuffer: '@image' Can't find file '"+arg+"'"
					If _docs    Then Print "   Entity: "+_docs.DeclPath
					If srcImage Then Print "   Expected location: "+srcImage
					'Debug()
				Endif

			
			Case "example"

				EmitLine( "```" )
				
				Local i0:=i
				While i<lines.Length And lines[i].Trim()<>"@end"
					EmitLine( lines[i] )
					i+=1
				Wend
				
				EmitLine( "```" )
				
				If i<lines.Length i+=1

			Case "#","##","###","####","#####"
				
				Local label:=arg
				Local ident:=label.Replace( " ","-" ).ToLower()
				
				Local docs:=New DocsNode( ident,label,_docs,DocsType.Hash )
				
				EmitLine( "<a name='"+ident+"'></a>" )
				
				EmitLine( tag+" "+arg )
				
				
			Case "manpage"
				
				Local label:=arg
				Local ident:=label.Replace( " ","-" ).ToLower()
				
				Local docs:=New DocsNode( ident,label,_docs,DocsType.Decl )
				
				Local buf:=New DocsBuffer( docs, _parent, _module, _baseDir )
				
				buf.EmitLines( lines.Slice( i ) )
				
				docs.Markdown=buf.Flush()
				
				i=lines.Length
				
			Default
			
				Print "DocsBuffer error: tag='"+tag+"' line='"+lines[i-1]+"'"
			
			End
			
			
		Wend
	End
	
	Method Flush:String()
	
		If _params.Length	
		
			EmitBr()
			Emit( "| Parameters |    |" )
			Emit( "|:-----------|:---|" )
			
			For Local p:=Eachin _params
			
				Local i:=p.Find( " " )
				If i=-1 Continue
				
				Local id:=p.Slice( 0,i )
				Local docs:=p.Slice( i ).Trim()
				If Not docs Continue
				
				Emit( "| `"+id+"` | "+p+" |" )
			Next
			
			_params.Clear()
			
		Endif
		
		Local markdown:=_lines.Join( "~n" ).Trim()+"~n"
		
		_lines.Clear()
		_label=""
		_return=""
		_pre=-1
		
		Return markdown
	End
	
	Method Debug()
		Print "   DocsBuffer.Debug()"
		Print "      BaseDir           : "+_baseDir
		If _docs
			Print "      _docs.Ident      : "+_docs.Ident
			Print "      _docs.Label      : "+_docs.Label
			Print "      _docs.FilePath   : "+_docs.FilePath
			Print "      _docs.FilePathUrl: "+_docs.FilePathUrl
			Print "      _docs.DeclPath   : "+_docs.DeclPath
			Print "      _docs.DeclLink   : "+_docs.DeclLink
		Else
			Print "      _docs:DocsNode = Null"
		Endif
		If _parent
			Print "      _parent.Ident      : "+_parent.Ident
			Print "      _parent.Label      : "+_parent.Label
			Print "      _parent.FilePath   : "+_parent.FilePath
			Print "      _parent.FilePathUrl: "+_parent.FilePathUrl
			Print "      _parent.DeclPath   : "+_parent.DeclPath
			Print "      _parent.DeclLink   : "+_parent.DeclLink
		Else
			Print "      _docs:DocsNode = Null"
		Endif
		If _module
			Print "      _module.name: "+_module.name
			Print "      _module.srcPath: "+_module.srcPath
			Print "      _module.ident: "+_module.ident
			Print "      _module.baseDir: "+_module.baseDir
			Print "      _module.buildDir: "+_module.buildDir
			Print "      _module.outputDir: "+_module.outputDir
			Print "      _module.cacheDir: "+_module.cacheDir
			Print "      _module.hfileDir: "+_module.hfileDir
			Print "      _module.cfileDir: "+_module.cfileDir
			Print "      _module.afile: "+_module.afile
			Print "      _module.rfile: "+_module.rfile
		Else
			Print "      _module:Module = Null"
		Endif
	End
		
	Private
	
	Field _docs:DocsNode
	Field _parent:DocsNode
	Field _module:Module
	field _baseDir:String
	Field _lines:=New StringStack
	Field _label:String
	Field _params:=New StringStack
	Field _return:String
	Field _pre:Int=-1
	
	Method FixIndent( i0:Int,i1:Int )
		
		Local indent:=10000
		
		For Local i:=i0 Until i1
			Local line:=_lines[i],j:=0
			While j<line.Length
				If line[j]>32 Exit
				j+=1
			Wend
			indent=Min( indent,j )
		Next
		
		If indent=10000 indent=0
			
		For Local i:=i0 Until i1
			_lines[i]=_lines[i].Slice( indent )
		Next
	
	End
End

