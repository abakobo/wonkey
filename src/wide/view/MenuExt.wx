
Namespace wide





Class MenuExt Extends DockingView


	#rem wonkeydoc Creates a new menu.
	#end
	Method New( text:String="" )
'		Style=GetStyle( "Menu" )
'		Style.BackgroundColor = GetNewColor( MainWindow._theme.Syntax[14], 0.08 )
'		Style.SkinColor = GetNewColor( MainWindow._theme.Syntax[14], 0.08 )

		Visible=False
		Layout="float"
		Gravity=New Vec2f( 0,0 )
		
		_text=text
	End

	
	#rem wonkeydoc Menu text
	#end
	Property Text:String()
		Return _text
	End


	'draw the background of the menu
	Method OnRender( canvas:Canvas ) Override
		Local bnd:Recti = canvas.Viewport
		bnd.Top -= 2
		bnd.Bottom += 4
		canvas.Viewport = bnd

		canvas.Color = Color.Black * 0.1
		canvas.DrawRoundedRect( 0,0, Width,Height+4, 7 )
		canvas.DrawRoundedRect( 1,1, Width,Height+4, 6 )
		canvas.DrawRoundedRect( 0,0, Width-3,Height+1, 5 )

		canvas.Color = GetNewColor( MainWindow._theme.IDE[0], 0.03 )
		canvas.DrawRoundedRect( 1,0, Width-3,Height+2, 5 )
		canvas.Color = GetNewColor( MainWindow._theme.IDE[0], 0.13 )
		canvas.DrawFrameRoundedRect( 1,0, Width-4,Height+1, 5 )
	End


	#rem wonkeydoc Clears all items from the menu.
	#end
	Method Clear()
		Super.RemoveAllViews()
	End


	#rem wonkeydoc Adds a view to the menu.
	#end	
	Method AddView( view:View )
		AddView( view, "top" )
	End

	
	#rem wonkeydoc Adds an action to the menu.
	#end	
	Method AddAction( action:Action )
		Local button := New MenuButtonExt( action )
		
		button.Clicked = Lambda()
			CloseAll()
			'a bit gnarly, but makes sure menu is *really* closed...
			App.RequestRender()
			App.Idle += action.Trigger
		End
		
		AddView( button )
	End

	
	Method AddAction:Action( text:String )
		Local action:=New Action( text )
		AddAction( action )
		Return action
	End

	
	#rem wonkeydoc Adds a separator to the menu.
	#end
	Method AddSeparator()
		AddView( New MenuSeparator, "top" )
	End

	
	#rem wonkeydoc Adds a submenu to the menu.
	#end
	Method AddSubMenu( menu:MenuExt )
		Local button:=New MenuButtonExt( menu.Text )
		button.HasSubmenu=True
		
		_subs[button]=menu
		
		button.Clicked=Lambda()
			If Not menu.Visible
				Local location:=New Vec2i( button.Bounds.Right,button.Bounds.Top )
				menu.Open( location,button,Self )
			Endif
		End
		
		AddView( button,"top" )
	End

	
	#rem wonkeydoc Opens the menu.
	#end
	Method Open()
		Open( App.MouseLocation, App.ActiveWindow, Null )
	End

	
	#rem wonkeydoc @hidden
	#end
	Method Open( location:Vec2i, view:View, owner:View )
		If Visible Return
		
		While Not _open.Empty And _open.Top<>owner
			_open.Top.Close()
		Wend
		
		If _open.Empty Then
			_filter=App.MouseEventFilter
			App.MouseEventFilter=MouseEventFilter
		Endif
		
		Local window:=view.Window
		
'		window.Bounds.Top -= 3
'		window.Bounds.Bottom += 3
		
		window.AddChildView( Self )
		Visible = True
		
		location = view.TransformPointToView( location,window )
		
		' fit into window area
		Local size:=MeasureLayoutSize()
		If location.x+size.x > window.Bounds.Right Then
			location = location-New Vec2i( size.x,0 )
		Endif
		If location.y+size.y > window.Bounds.Bottom then
			location = location-New Vec2i( 0,size.y )
		Endif
		
		Offset = location
		
		_owner = owner

		_open.Push( Self )
	End

	
	#rem wonkeydoc @hidden
	#end	
	Method Close()
		If Not Visible Return
		
		While Not _open.Empty
			Local menu:=_open.Pop()
			menu.Parent.RemoveChildView( menu )
			menu.Visible=False
			menu._owner=Null
			
			If menu=Self Exit
		Wend
		
		If Not _open.Empty Return
		
		App.MouseEventFilter=_filter

		_filter=Null
	End
	
Private
	
	Field _subs:=New Map<View,MenuExt>
	Field _text:String
	Field _owner:View
	Global _hovered:View
	Global _timer:Timer
	Global _sub:MenuExt
	Global _seq:Int
	
	Global _open:=New Stack<MenuExt>
	
	Global _filter:Void( MouseEvent )

	
	Function CloseAll()
		_open[0].Close()
	End

	
	Function MouseEventFilter( event:MouseEvent )
		If event.Eaten Return
		
		Local view:=event.View
			
		For Local menu:=Eachin _open
			If view.IsChildOf( menu ) Then
				
				If event.Type=EventType.MouseMove
					' auto-expand sub menus
					If view=_hovered Return
					_hovered=view
					If _timer Then _timer.Cancel()
					
					Local sub:=menu._subs[view]
					
					_seq=0
					_timer=New Timer( 4,Lambda()
						' close previous
						If _seq=0
							If _sub And menu<>_sub
								_sub.Close()
								_sub=Null
							Endif
							_seq+=1
							Return
						Endif
						
						' open submenu
						If sub
							Local location:=New Vec2i( view.Bounds.Right,view.Bounds.Top )
							
							If sub.Visible Then sub.Close()
							sub.Open( location,view,menu )
							_sub=sub
						Endif
						
						_timer.Cancel()
						_timer=Null
						
					End )
				Endif
				
				Return
			Endif
		Next
		
		_hovered=Null
		If _timer Then _timer.Cancel()
		
		' auto-expand root menus in menu bar
		If event.Type=EventType.MouseMove
			Local bar:=Cast<MenuBarExt>( _open[0]._owner )
			If bar
				Local window:=view.Window
				Local location:=view.TransformPointToView( event.Location,window )
				Local v:=bar.FindViewAtWindowPoint( location )
				If v<>bar.Opened
					Local b:=Cast<MenuButton>( v )
					If b Then b.Clicked()
				Endif
			Endif
		Endif
		
		' we are interesting to mousedown only
		If event.Type<>EventType.MouseDown Return
		
		If _open[0]._owner
			If view<>_open[0]._owner And view.IsChildOf( _open[0]._owner ) Return
			
			CloseAll()

		Else
			CloseAll()
		Endif
	End

End


Class MenuButtonExt Extends Button
	Field HasSubmenu:Bool

	
	Method New( action:Action )
		Super.New( action )
		
		Style=GetStyle( "MenuButton" )
'		Style.BackgroundColor = GetNewColor( MainWindow._theme.Syntax[14], 0.08 )

'		Style.BackgroundColor = Color.None
		
		TextGravity=New Vec2f( 0,.5 )
		Layout="fill-x"
		
		_action=action
		
		UpdateThemeColors()
	End

	
	Method New( text:String )
		Super.New( text )
		
		Style=GetStyle( "MenuButton" )
'		Style.BackgroundColor = GetNewColor( MainWindow._theme.Syntax[14], 0.08 )

'		Style.BackgroundColor = Color.None
'		Style.SkinColor = Color.Red'GetNewColor( MainWindow._theme.Syntax[14], 0.08 )

		TextGravity=New Vec2f( 0,.5 )
		Layout="fill-x"
		
		UpdateThemeColors()
	End
	
	
Protected

	
	Method OnThemeChanged() Override
		UpdateThemeColors()
	End

	
	Method OnMeasure:Vec2i() Override
		Local size := Super.OnMeasure()
	
		If _action
			Local hotKey := _action.HotKeyText
			If hotKey size.x += RenderStyle.Font.TextWidth( "         "+hotKey )
		Endif
		If HasSubmenu
			size.x += RenderStyle.Font.TextWidth( " >" )
		Endif
		Return size
	End

	Method OnRender( canvas:Canvas ) Override
		Local bnd:Recti = canvas.Viewport
		bnd.Top -= 1
		bnd.Bottom += 1
		canvas.Viewport = bnd

		If Super.StyleState = "hover" Then
			canvas.Color = MainWindow._theme.IDE[3] * 0.8
			canvas.DrawRoundedRect( 0,0,Width,Height+2, 3 )
		End If
		
		Local ty:int = (Height-MeasuredSize.y) * TextGravity.y

		If _action Then
			Local hotKey:string = _action.HotKeyText
			If hotKey
				Local w:int = RenderStyle.Font.TextWidth( hotKey )
				Local tx:int = (Width-w)-5
				Local color := canvas.Color
				canvas.Color = _shortCutColor
				canvas.DrawText( hotKey, tx, ty )
				canvas.Color = color
			Endif
		Endif
		
		canvas.Color = MainWindow._theme.IDE[1]
		If HasSubmenu Then
			Local tx:int = Width-5
			canvas.DrawText( ">", tx, ty, 1,0 )
		Endif

		canvas.DrawText( Text, 6, ty )
	End
	
Private
	
	Field _action:Action
	Field _shortCutColor:Color

	
	Method UpdateThemeColors()
'		_shortCutColor=App.Theme.GetColor( "menu-shortcut" )
		_shortCutColor = MainWindow._theme.IDE[1] * 0.7
	End
	
End


Class MenuButtonEx Extends Button

	Method New( text:String )
		Super.New( text )

		Style=GetStyle( "MenuButton" )
		TextGravity=New Vec2f( 0,.5 )
		Layout="fill-x"
	End

	
	Method New( action:Action )
		Super.New( action )
		
		Style=GetStyle( "MenuButton" )
		TextGravity=New Vec2f( 0,.5 )
		Layout="fill-x"

		_action=action
	End

	
	Method OnMeasure:Vec2i() Override
		Local size:=Super.OnMeasure()
		
		If _action
			Local hotKey:=_action.HotKeyText
			If hotKey size.x+=RenderStyle.Font.TextWidth( "         "+hotKey )
		Endif
		
		Return size
	End

	
	Method OnRender( canvas:Canvas ) Override
		Local bnd:Recti = Bounds
		bnd.Left -= 4
		bnd.Right += 8
		bnd.Top -= 4
		bnd.Bottom += 8
		canvas.Viewport = bnd

		If Super.StyleState = "hover" Then
			canvas.Color = MainWindow._theme.IDE[3] * 0.8
			canvas.DrawRect( 4,4,Width+8,Height+8)
		End If

		If Text Then
			canvas.Color = MainWindow._theme.IDE[1]
			canvas.DrawText( Text, 8,6 )
		End If
		
'		canvas.DrawRect( 0,0, Width, Height )
'		Super.OnRender( canvas )
'		
'		If _action Then
'			Local hotKey:=_action.HotKeyText
'			If hotKey
'				Local w:=RenderStyle.Font.TextWidth( hotKey )
'				Local tx:=(Width-w)
'				Local ty:=(Height-MeasuredSize.y) * TextGravity.y
'				canvas.DrawText( hotKey,tx,ty )
'			Endif
'		Endif
	End
	
	Field _action:Action

End



Class MenuBarExt Extends ToolBar
	Method New()
		Style=GetStyle( "MenuBar" )
'		Style.BackgroundColor = GetNewColor( MainWindow._theme.Syntax[14], 0.08 )
		
		Layout="fill-x"
		Gravity=New Vec2f( 0,0 )
	End

	
	Property Opened:MenuButtonEx()
		Return _opened
	End


	Method AddMenu( menu:MenuExt )
		Local button:=New MenuButtonEx( menu.Text )

		button.Clicked=Lambda()
			_opened=Null
			If menu.Visible
				menu.Close()
			Else
				Local location:=New Vec2i( button.Bounds.Left, button.Bounds.Bottom )
				menu.Open( location,button,Self )
				_opened=button
			Endif
		End
		
		AddView( button )
	End

	
	Method OnRender( canvas:Canvas ) Override
		canvas.Color = GetNewColor( MainWindow._theme.IDE[0], 0.07 )
		canvas.DrawRect( 0,0,Width,Height )
		
	End Method
	
		
Private
	
	Field _opened:MenuButtonEx
	
End
