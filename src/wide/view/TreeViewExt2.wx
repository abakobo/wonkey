
Namespace wide

#Import "treeview2.wx"

Class TreeViewExt2 Extends TreeView2
	
	Field NodeClicked:Void( node:Node )
	Field NodeRightClicked:Void( node:Node )
	Field NodeDoubleClicked:Void( node:Node)
	Field NodeExpanded:Void( node:Node )
	Field NodeCollapsed:Void( node:Node )
	Field SelectedChanged:Void( selNode:Node )
	
	Field ExpandParentsForSelected:=True

	
	Method New()
		Super.New()
		
		NodeClicked2+=Lambda( node:Node )
			If _singleClickExpanding
				If TrySwitchExpandingState( node ) Return
			Endif
			
			OnSelect( node )
			NodeClicked( node )
		End
		
		Super.NodeDoubleClicked+=Lambda( node:Node )
			If TrySwitchExpandingState( node ) Return
			
			OnSelect( node )
			NodeDoubleClicked( node )
		End
		
		Super.NodeRightClicked+=Lambda( node:Node )
			OnSelect( node )
			NodeRightClicked( node )
		End
		
		Super.NodeExpanded+=Lambda( node:Node )
			OnExpanded( node,True )
		End
		
		Super.NodeCollapsed+=Lambda( node:Node )
			OnCollapsed( node,True )
		End
		
		OnThemeChanged()
	End

	
	Property Selected:TreeView.Node()
		Return _sel
	Setter( value:TreeView.Node )
		If _sel<>value
			_sel=value
			SelectedChanged( _sel )
		Endif
		
		EnsureVisible( _sel )
		
		RequestRender()
	End

	
	Property SingleClickExpanding:Bool()
		Return _singleClickExpanding
	Setter( value:Bool )
		_singleClickExpanding=value
	End

	
	Method SaveState( jobj:JsonObject,jkey:String )
		_expander.SaveState( RootNode,jobj,jkey )
	End

	
	Method LoadState( jobj:JsonObject,jkey:String )
		_expander.LoadState( jobj,jkey )
	End

	
	Method FindByText:TreeView.Node( text:String,recursive:Bool=False )
		Return FindSubNode( RootNode, recursive, Lambda:Bool( n:TreeView.Node )
			Return n.Text=text
		End )
	End

	
	Method FindSubNode:TreeView.Node( text:String,whereNode:TreeView.Node,recursive:Bool=False )
		Return FindSubNode( whereNode, recursive, Lambda:Bool( n:TreeView.Node )
			Return n.Text=text
		End )
	End

	
	Method FindSubNode:TreeView.Node( whereNode:TreeView.Node,recursive:Bool,findCondition:Bool(TreeView.Node) )
		If findCondition( whereNode ) Return whereNode
	
		For Local i:=Eachin whereNode.Children
			If findCondition( i ) Return i
			If recursive And i.Children
				Local n:=FindSubNode( i,recursive,findCondition )
				If n Return n
			Endif
		Next
	
		Return Null
	End

	
	Method RemoveNode( node:Node )
		node.Remove()
		If node=Selected Then Selected=Null
	End

	
	Method SelectByPath( path:String )
		Local n:=FindSubNode( RootNode,
						True,
						Lambda:Bool( n:TreeView.Node )
							Return GetNodePath( n )=path
						End )
		
		If n Then Selected=n
	End

	
	Method SelectByPathEnds( pathEnding:String )
		Local n:=FindSubNode( RootNode,
						True,
						Lambda:Bool( n:TreeView.Node )
							Return GetNodePath( n ).EndsWith( pathEnding )
						End )
	
		If n Then Selected=n
	End
	
	
	Method Sort( func:Int( lhs:TreeView.Node,rhs:TreeView.Node )=Null )
		If func=Null
			func=Lambda:Int( lhs:TreeView.Node,rhs:TreeView.Node )
				Return lhs.Text<=>rhs.Text
			End
		Endif
		
		SortNode( RootNode,func )
	End
	
	
Protected
	
	Field _expander:=New TreeViewExpander

	
	Method OnThemeChanged() Override
'		_selColor=App.Theme.GetColor( "treeview-selected-row" )
		_selColor = MainWindow._theme.IDE[3] * 0.8
	End

	
	Method OnRenderContent( canvas:Canvas ) Override
'		Print "OnRender TreeViewExt2"
		If _sel <> Null
			canvas.Color=_selColor
			Local r:=_sel.Rect
			' make selection whole line
			r.Left=Rect.Left
			r.Right=Rect.Right
			canvas.DrawRect( r )
		Endif
	
		Super.OnRenderContent( canvas )
	End
	

	Method OnContentMouseEvent( event:MouseEvent ) Override
		Select event.Type
			Case EventType.MouseWheel
				' make scroll little faster
				Scroll-=New Vec2i( 0,RenderStyle.Font.Height*event.Wheel.Y*2 )
				Return
			
			Case EventType.MouseClick
				_expandStateChanged=False
			
			Case EventType.MouseDoubleClick
				_doubleClicked=True
				
			Case EventType.MouseUp
				If Not _doubleClicked And event.Button=MouseButton.Left
					Local p:=TransformWindowPointToView( Mouse.Location )
					Local node:=FindNodeAtPoint( p )
					If node And Not _expandStateChanged Then NodeClicked2( node )
				Endif
				
				_doubleClicked=False
		End
		
		Super.OnContentMouseEvent( event )
	End

	
	Method OnCollapsed( node:Node,sel:Bool )
		_expandStateChanged=True
	
		_expander.Store( node )
		If sel Then OnSelect( node )
		NodeCollapsed( node )
	End

	
	Method OnExpanded( node:Node,sel:Bool )
		_expandStateChanged=True
	
		_expander.Store( node )
		If sel Then OnSelect( node )
		NodeExpanded( node )
	End
	
'	Method PrintExpanded()
'		
'		_expander.PrintExpanded()
'	End
	
Private
	
	Field _sel:TreeView.Node
	Field _selColor:Color
	Field _singleClickExpanding:Bool
	Field _expandStateChanged:Bool
	Field _doubleClicked:Bool
	
	Field NodeClicked2:Void( node:Node )

	
	Method TrySwitchExpandingState:Bool( node:TreeView.Node )
		If node.Children.Length=0 Return False
		
		node.Expanded=Not node.Expanded
		If node.Expanded
			Super.NodeExpanded( node )
		Else
			Super.NodeCollapsed( node )
		Endif
		
		Return True
	End

	
	Method OnSelect( node:TreeView.Node )
		Selected=node
		Self.MakeKeyView()
		
		RequestRender()
	End

	
	Method EnsureVisible( node:TreeView.Node )
		If Not node Return
		
		If ExpandParentsForSelected
			Local n:=node.Parent
			While n
				n.Expanded=True
				n=n.Parent
			Wend
		Endif
		
		' scroll Y only
		Local scroll:=Scroll
		Super.EnsureVisible( node.Rect )
		scroll.Y=Scroll.y
		Scroll=scroll
	End


	Method SortNode( node:TreeView.Node,func:Int( lhs:TreeView.Node,rhs:TreeView.Node ) )
		If node.Children.Length=0 Return
		
		Local children:=New Stack<TreeView.Node>
		children+=node.Children
		
		children.Sort( func )
		
		node.RemoveAllChildren()
		
		For Local n:=Eachin children
			node.AddChild( n )
			
			SortNode( n,func )
		Next
	End
	
End

